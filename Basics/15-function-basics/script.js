function test(){
    alert("Anyya is princess!");
}

// test();
// test();

// Локальные переменные

// Переменные, объявленные внутри функции, видны только внутри этой функции.


function showMessage() {
    let message = "Привет, я JavaScript!"; // локальная переменная
  
    alert( message );
  }
  
//   showMessage(); // Привет, я JavaScript!
  
//   alert( message ); // <-- будет ошибка, т.к. переменная видна только внутри функции


// Внешние переменные

// У функции есть доступ к внешним переменным, например


// let userName = 'Anya';

// function showMessage() {
//   let message = 'Hello, ' + userName;
//   alert(message);
// }

// showMessage(); // Hello, Anya

// Функция обладает полным доступом к внешним 
// переменным и может изменять их значение

// let my_name = "Ane4ka";

// function showMessage(){
//   my_name = "Anootya";

//   let message = "Hello, " + my_name;
//   alert(message);
// }

// alert(my_name);

// showMessage();

// alert(my_name);

// Внешняя переменная используется, только 
// если внутри функции нет такой локальной.

// let userName = 'Вася';

// function showMessage() {
//   let userName = "Петя"; // объявляем локальную переменную

//   let message = 'Привет, ' + userName; // Петя
//   alert(message);
// }

// // функция создаст и будет использовать свою собственную локальную переменную userName
// showMessage();

// alert( userName ); // Вася, не изменилась, функция не трогала внешнюю переменную



// Параметры

// Мы можем передать внутрь функции любую информацию, 
// используя параметры (также называемые аргументами функции).

// function showMessage(from, text){
//   alert(from + '!' + text);
// }

// showMessage('Aня', 'Привет!');
// showMessage('Аня', "У тебя все получится!");
// showMessage("Аня", "Тебя обязательно возьмут на работу!");


// Вот ещё один пример: у нас есть переменная from, и мы передаём 
// её функции. Обратите внимание: функция изменяет значение from, 
// но это изменение не видно снаружи. Функция всегда получает только 
// копию значения:


// function showMessage(from, text) {

//   from = '*' + from + '*'; // немного украсим "from"

//   alert( from + ': ' + text );
// }

// let from = "Аня";

// showMessage(from, "Привет"); // *Аня*: Привет

// значение "from" осталось прежним, функция изменила значение локальной переменной
// alert( from ); // Аня

/*
то есть мы вызываем функцию
и в в этой функции меняем переменную
т.е. когда вызываем ф-цию то у нас *Аня*
а когда используем переменную (похожую) вне ф-ции
то выбирают ее
--
ну котороче то что внутри ф-ции происходит
справедливо только при вызову ф-ции и все!
*/

// Параметры по умолчанию


// function showMessage(from, text) {

//   alert( from + ': ' + text );
// }

// showMessage("Anya"); //Anya: undefined

// Если мы хотим задать параметру text значение по умолчанию, 
// мы должны указать его после =:

// function showMessage(from, text = "текст не добавлен") {
  // alert( from + ": " + text );
// }

// showMessage("Аня"); // Аня: текст не добавлен


// Возврат значения


// Функция может вернуть результат, который будет передан в вызвавший её код.

// Простейшим примером может служить функция сложения двух чисел:


// function sum(a, b){
//   return a+b;
// }

// let result = sum(5,2);
// alert(result);

// Директива return может находиться в любом месте тела функции. 
// Как только выполнение доходит до этого места, функция останавливается, 
// и значение возвращается в вызвавший её код (присваивается переменной 
//   result выше).

// Вызовов return может быть несколько, например:

// function checkAge(age) {
//   if (age > 18) {
//     return true;
//   } else {
//     return confirm('А родители разрешили?');
//   }
// }

// let age = prompt('Сколько вам лет?', 18);

// if ( checkAge(age) ) {
//   alert( 'Доступ получен' );
// } else {
//   alert( 'Доступ закрыт' );
// }

// Возможно использовать return и без значения. 
// Это приведёт к немедленному выходу из функции.

function showMovie(age) {
  if ( !checkAge(age) ) {
    return;
  }

  alert( "Вам показывается кино" ); // (*)
  // ...
}










