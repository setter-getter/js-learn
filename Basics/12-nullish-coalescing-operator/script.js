// let user;

// alert(user ?? "Аноним"); // Аноним


// Конечно, если бы переменная user содержала любое значение, 
// кроме null/undefined, то мы бы увидели его:


// let user = "Anya";

// alert(user ?? "Аноним"); // Иван


// let firstName = null;
// let lastName = null;
// let nickName = "Суперкодер";

// показывает первое определённое значение:
// alert(firstName ?? lastName ?? nickName ?? "Аноним"); // Суперкодер


//Сравнение с ||

// Оператор ИЛИ || можно использовать для того же, что и ??, 
// как это было показано в предыдущей главе.

// Например, если в приведённом выше коде заменить ?? на ||, 
// то будет тот же самый результат:

// let firstName = null;
// let lastName = null;
// let nickName = null;

// // показывает первое истинное значение:
// alert(firstName || lastName || nickName || "Аноним"); // Суперкодер

//отличия
//оператор || не различает false, 0, пустую строку "" и null/undefined

// let height = 0;

// alert(height || 100); // 100
// alert(height ?? 100); // 0

// //Приоритет

// Оператор ?? имеет довольно низкий приоритет: 4, согласно таблице на MDN. 
// Таким образом, оператор ?? вычисляется до = и ?, 
// но после большинства других операций, таких как +, *.


// let height = null;
// let width = null;

// // важно: используйте круглые скобки
// let area = (height ?? 100) * (width ?? 50);

// alert(area); // 5000

// Иначе, если опустить скобки, то оператор * выполнится первым, так как у него 
// приоритет выше, чем у ??, а это приведёт к неправильным результатам

// без круглых скобок
// let area = height ?? 100 * width ?? 50; 
// alert(area);    //100* 0 = 0

// ...то же самое, что предыдущее выражение (вероятно, это не то, что нам нужно):
// let area = height ?? (100 * width) ?? 50;

// alert(area);



// Использование ?? вместе с && или ||


// let x = (1 && 2) ?? 3; // Работает без ошибок

// alert(x); // 2

// Оператор объединения с null ?? — это быстрый 
// способ выбрать первое «определённое» значение из списка.







